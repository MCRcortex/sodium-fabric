#version 450 core
layout(local_size_x = 1, local_size_y = LOCAL_SIZE_Y) in;

#import <sodium:occlusion/datatypes.h>
#import <sodium:occlusion/scene_data.glsl>

layout(std430, binding = 1) restrict readonly buffer RegionArrayData {
    int regionArray[MAX_REGIONS];
};

layout(std430, binding = 2) restrict readonly buffer RegionMetaData {
    RegionMeta[] regions;
};
uint REGION_ID;
#define REGION regions[REGION_ID]

layout(std430, binding = 3) restrict readonly buffer SectionVisibilityData {
    uint[] visibility;
};

layout(std430, binding = 4) restrict readonly buffer SectionMetaData {
    SectionMeta sections[];
};

layout(std430, binding = 5) restrict buffer TemporalData {
    uint sectionSeen[];
};

uint SECTION_ID;

#define SECTION sections[SECTION_ID]

vec3 half_size;
vec3 relative_center;

#import <sodium:occlusion/compute/global_command_writer.comp>

void writeBackfaceCulledCommands() {
    half_size = SECTION.aabb.size.xyz/2;
    relative_center = SECTION.aabb.offset.xyz + half_size - camera.xyz;

    /*
    uint msk = SECTION.bitvismsk;
    msk &= relative_center.y<half_size.y ? 0xFFFFFFFFu : 4278124286u;
    msk &= relative_center.y>-half_size.y? 0xFFFFFFFFu : 4261281277u;
    msk &= relative_center.x<half_size.x ? 0xFFFFFFFFu : 4227595259u;
    msk &= relative_center.x>-half_size.x? 0xFFFFFFFFu : 4160223223u;
    msk &= relative_center.z<half_size.z ? 0xFFFFFFFFu : 4025479151u;
    msk &= relative_center.z>-half_size.z? 0xFFFFFFFFu : 3755991007u;
    */
    /*
    uint msk = 0x40404040u;
	uvec3 A = uvec3(lessThan(relative_center, half_size));
	msk = A.x*0x04040404u+msk;
	msk = A.y*0x01010101u+msk;
	msk = A.z*0x10101010u+msk;
	uvec3 B = uvec3(greaterThan(relative_center, -half_size));
	msk = B.x*0x08080808u+msk;
	msk = B.y*0x02020202u+msk;
	msk = B.z*0x20202020u+msk;
    msk &= SECTION.bitvismsk;
	*/
    uint msk = 0x40404040u;


    msk = uint(relative_center.y<half_size.y ) * 0x01010101u + msk;
    msk = uint(relative_center.y>-half_size.y) * 0x02020202u + msk;
    msk = uint(relative_center.x<half_size.x ) * 0x04040404u + msk;
    msk = uint(relative_center.x>-half_size.x) * 0x08080808u + msk;
    msk = uint(relative_center.z<half_size.z ) * 0x10101010u + msk;
    msk = uint(relative_center.z>-half_size.z) * 0x20202020u + msk;

    /*
    uvec3 A = uvec3(lessThan(relative_center, half_size))*uvec3(0x04040404u,0x01010101u,0x10101010u);
    A += uvec3(greaterThan(relative_center, -half_size))*uvec3(0x08080808u,0x02020202u,0x20202020u);
    msk += A.x;
    msk += A.y;
    msk += A.z;*/


    msk &= SECTION.bitvismsk;
    if (msk == 0)
        return;


    //TODO: optimize all this shit
    uint instanceId = writeInstancedData(SECTION.sectionPos.xyz - camera.xyz);


    uint skipmsk = msk|(msk>>16);
    skipmsk |= skipmsk>>8;
    skipmsk &= 255u;

    //TODO: THIS
    bool wasNotVisibleLastFrame = sectionSeen[SECTION_ID] == frameId;
    sectionSeen[SECTION_ID] = frameId;

    /*
    int idx = 0;
    while (skipmsk != 0) {
        int localOffset = findLSB(skipmsk);
        skipmsk >>= localOffset;
        int localLength = findLSB(~skipmsk) + 1;
        skipmsk >>= localLength;
        idx += localOffset;
        writeFaceRenderCommand(msk, idx, localLength, instanceId, wasNotVisibleLastFrame);
        idx += localLength;
    }*/

    uint idx = 0;
    while (skipmsk != 0) {
        //this is done to try keep all the instructions in relativly similar warp
        barrier();
        uint localOffset = findLSB(skipmsk)+1;
        skipmsk >>= localOffset;
        idx += localOffset;
        writeFaceRenderCommand(msk, idx-1, 1, instanceId, wasNotVisibleLastFrame);
    }
}

void main() {
    //Doing this first cause its probably the fastest
    if (visibility[gl_GlobalInvocationID.x*REGION_SECTION_MAX_SIZE + gl_GlobalInvocationID.y] != frameId) {
        return;
    }

    REGION_ID = regionArray[gl_GlobalInvocationID.x];
    if (REGION.sectionCount <= gl_GlobalInvocationID.y) {
        return;
    }
    SECTION_ID = REGION.sectionStart + gl_GlobalInvocationID.y;

    if (SECTION.id != gl_GlobalInvocationID.y) {
        return;
    }


    //TODO: Need to make this all optional too do, given that this is only for back face culling

    //atomicAdd(instanceCounter, 1);
    writeBackfaceCulledCommands();
}